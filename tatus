[1mdiff --git a/package-lock.json b/package-lock.json[m
[1mindex df691a3..f6b9a24 100644[m
[1m--- a/package-lock.json[m
[1m+++ b/package-lock.json[m
[36m@@ -8249,19 +8249,6 @@[m
       "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",[m
       "integrity": "sha1-FQStJSMVjKpA20onh8sBQRmU6k8="[m
     },[m
[31m-    "node_modules/fsevents": {[m
[31m-      "version": "2.3.2",[m
[31m-      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",[m
[31m-      "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",[m
[31m-      "hasInstallScript": true,[m
[31m-      "optional": true,[m
[31m-      "os": [[m
[31m-        "darwin"[m
[31m-      ],[m
[31m-      "engines": {[m
[31m-        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"[m
[31m-      }[m
[31m-    },[m
     "node_modules/function-bind": {[m
       "version": "1.1.1",[m
       "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",[m
[36m@@ -22640,12 +22627,6 @@[m
       "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",[m
       "integrity": "sha1-FQStJSMVjKpA20onh8sBQRmU6k8="[m
     },[m
[31m-    "fsevents": {[m
[31m-      "version": "2.3.2",[m
[31m-      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",[m
[31m-      "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",[m
[31m-      "optional": true[m
[31m-    },[m
     "function-bind": {[m
       "version": "1.1.1",[m
       "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",[m
[1mdiff --git a/src/Components/SuccessDialog.tsx b/src/Components/SuccessDialog.tsx[m
[1mindex f4b3646..8b6010e 100644[m
[1m--- a/src/Components/SuccessDialog.tsx[m
[1m+++ b/src/Components/SuccessDialog.tsx[m
[36m@@ -20,10 +20,11 @@[m [mconst Transition = React.forwardRef(function Transition([m
 export interface SuccessDialogProps {[m
   open: boolean;[m
   onClose: () => void;[m
[32m+[m[32m  last: boolean;[m
 }[m
 [m
 export default function SuccessDialog(props: SuccessDialogProps) {[m
[31m-  const { onClose, open } = props;[m
[32m+[m[32m  const { onClose, open, last } = props;[m
 [m
   const handleClose = () => {[m
     onClose();[m
[36m@@ -41,12 +42,14 @@[m [mexport default function SuccessDialog(props: SuccessDialogProps) {[m
         <DialogTitle>{"You did it!"}</DialogTitle>[m
         <DialogContent>[m
           <DialogContentText id="alert-dialog-slide-description">[m
[31m-            Congratulations you have successfully completed the task![m
[31m-            Lets go to the next question![m
[32m+[m[32m            Congratulations you have successfully completed the {last ? "exercises set" : "task"}![m
[32m+[m[32m            {last ? "" : "Lets go to the next question!"}[m
           </DialogContentText>[m
         </DialogContent>[m
         <DialogActions>[m
[31m-          <Button onClick={handleClose}>Next Question</Button>[m
[32m+[m[32m          {last[m[41m [m
[32m+[m[32m          ? <Button onClick={handleClose}>Close</Button>[m
[32m+[m[32m          : <Button onClick={handleClose}>Next Question</Button>}[m
         </DialogActions>[m
       </Dialog>[m
     </div>[m
[1mdiff --git a/src/Pages/Home.tsx b/src/Pages/Home.tsx[m
[1mindex 3ffdba3..b36853c 100644[m
[1m--- a/src/Pages/Home.tsx[m
[1m+++ b/src/Pages/Home.tsx[m
[36m@@ -1,15 +1,36 @@[m
 import Button from '@mui/material/Button';[m
[32m+[m[32mimport Paper from '@mui/material/Paper';[m
 import Stack from '@mui/material/Stack';[m
[32m+[m[32mimport { Link } from 'react-router-dom';[m
 import Header from '../Components/Header';[m
 import './../App.css';[m
 [m
[32m+[m[32m// Load default exercises from Exercises[m
[32m+[m[32mimport exercise0 from './../Exercises/0.json';[m
[32m+[m
[32m+[m[32mlet exercises = [[m
[32m+[m[32m  ["Example exercise", exercise0],[m
[32m+[m[32m][m
[32m+[m
 const Home = () => {[m
   return ([m
     <div className="App">[m
[31m-      <Header title="JavaScript DCR Graphs Engine"/>[m
[31m-      <Stack direction="row" spacing={2} justifyContent="center" alignItems="center">[m
[31m-        <Button href="creator" variant="contained" size="large">Creator</Button>[m
[31m-        <Button href="solver" variant="contained" size="large">Solver</Button>[m
[32m+[m[32m      <Header title=""/>[m
[32m+[m[32m      <Stack direction="column" spacing={1} justifyContent="center" alignItems="center">[m
[32m+[m[32m        <h1>Create a new Exercise</h1>[m
[32m+[m[32m        <Button component={Link} to="creator" variant="contained" size="large">Creator</Button>[m
[32m+[m[32m        <h1>Solve an exercise</h1>[m
[32m+[m[32m        <Button component={Link} to="solver" variant="contained" size="large">Blank Solver</Button>[m
[32m+[m[32m        {exercises.map((exercise, index) => {[m
[32m+[m[32m          return ([m
[32m+[m[32m            <Link key={index} to="/solver" state={{ exerciseToLoad: exercise[1] }} >[m
[32m+[m[32m              <Paper elevation={3} style={{width: "400px"}}>[m
[32m+[m[32m                <h4 style={{lineHeight: "40px", margin:"0px"}}>{exercise[0] as String}</h4>[m
[32m+[m[32m              </Paper>[m
[32m+[m[32m            </Link>[m
[32m+[m[32m          )[m
[32m+[m[32m        }[m
[32m+[m[32m        )}[m
       </Stack>[m
     </div>[m
   );[m
[1mdiff --git a/src/Pages/Solver.tsx b/src/Pages/Solver.tsx[m
[1mindex 95764c0..4bf3c7f 100644[m
[1m--- a/src/Pages/Solver.tsx[m
[1m+++ b/src/Pages/Solver.tsx[m
[36m@@ -13,7 +13,8 @@[m [mimport {[m
 import HelpIcon from '@mui/icons-material/Help';[m
 import UploadFileIcon from '@mui/icons-material/UploadFile';[m
 import HintIcon from '@mui/icons-material/Lightbulb';[m
[31m-import NextIcon from '@mui/icons-material/PlayArrow';[m
[32m+[m[32mimport NextIcon from '@mui/icons-material/ArrowCircleRight';[m
[32m+[m[32mimport PreviousIcon from '@mui/icons-material/ArrowCircleLeft';[m
 import ExpandMoreIcon from '@mui/icons-material/ExpandMore';[m
 [m
 // Import our custom components & utilities[m
[36m@@ -27,6 +28,7 @@[m [mimport CircularProgressWithLabel from '../Util/CircularProgressWithLabel';[m
 import { HelpSolver } from '../Components/Help';[m
 import { Exercise, Symbol, Scenario } from '../Util/Entity/Exercise';[m
 import SuccessDialog from '../Components/SuccessDialog';[m
[32m+[m[32mimport withRouter from '../Util/withRouter';[m
 [m
 // Main page of the application[m
 // I have added fields, such that it is treated somewhat as a "Progress class"[m
[36m@@ -40,12 +42,22 @@[m [mclass Solver extends React.Component<any, any> {[m
       percentExercises: 0,[m
       percentForbidden: 0,[m
       percentRequired: 0,  [m
[31m-      solution: "",[m
       graph: parser.parse(""),    [m
[31m-      showSuccessDialog: false,            [m
[32m+[m[32m      showSuccessDialog: false,[m[41m           [m
     };[m
   }[m
 [m
[32m+[m[32m  componentDidMount() {[m
[32m+[m[32m    this.loadExercises();[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  // Load the exercises from the file in props.exerciseToLoad[m
[32m+[m[32m  loadExercises = () => {[m
[32m+[m[32m    if (this.props.location.state) {[m
[32m+[m[32m      this.setState({ exercises: this.props.location.state.exerciseToLoad as Exercise[] });[m
[32m+[m[32m    }[m
[32m+[m[32m  }[m
[32m+[m
   // This function gets the progress in percentage[m
   handleProgress(){[m
     let exerciseLen = this.state.exercises.length [m
[36m@@ -53,7 +65,6 @@[m [mclass Solver extends React.Component<any, any> {[m
     let percent = currentIndex/exerciseLen * 100[m
     this.setState({[m
       percentExercises: percent,[m
[31m-      currentQuestion: 0,[m
       graph: parser.parse("")[m
     });[m
   }[m
[36m@@ -67,15 +78,18 @@[m [mclass Solver extends React.Component<any, any> {[m
 [m
   // Continously parse the solution and check for errors[m
   parseSolution(e: any) {[m
[32m+[m[32m    let exercises = this.state.exercises;[m
[32m+[m[32m    let solution = e.target.value;[m
[32m+[m[32m    exercises[this.state.currentQuestion].studentSolution = solution;[m[41m    [m
     try {[m
       let graph = parser.parse(e.target.value);[m
       // Check if we pass the given scenarios and update progress[m
       this.checkScenarios();[m
       // If the graph is valid, clear any error messages[m
[31m-      this.setState({parseError: "", graph: graph, solution: e.target.value});[m
[32m+[m[32m      this.setState({parseError: "", graph: graph, exercises: exercises});[m
     } catch (err: any) {[m
       // parse will throw an exception on error so we catch it here[m
[31m-      this.setState({parseError: (err.message + "</br>" + JSON.stringify(err.location)), solution: e.target.value});[m
[32m+[m[32m      this.setState({parseError: (err.message + "</br>" + JSON.stringify(err.location)), exercises: exercises});[m
     }[m
   }[m
 [m
[36m@@ -122,15 +136,17 @@[m [mclass Solver extends React.Component<any, any> {[m
       let steps = scenario.scenario.split(",");[m
 [m
       // Execute all steps and see if the graph is accepting[m
[31m-      graph = parser.parse(this.state.solution); // Reset graph[m
[32m+[m[32m      graph = parser.parse(currentExercise.studentSolution); // Reset graph[m
[32m+[m[32m      let failed = false;[m
       for (let j = 0; j < steps.length; j++) {[m
         let step = steps[j];[m
[32m+[m[32m        if(!graph.getEvent(step).enabled()) failed = true;[m
         graph.execute(step);[m
       }[m
       console.log(graph.status());[m
[31m-      if(graph.isAccepting() && allowed){[m
[32m+[m[32m      if(graph.isAccepting() && allowed && !failed){[m
         allowedCount++;[m
[31m-      } else if(!graph.isAccepting() && !allowed){[m
[32m+[m[32m      } else if((!graph.isAccepting() || failed) && !allowed){[m
         forbiddenCount++;[m
       } else {[m
         console.log("Error in solution: " + scenario.scenario + " Expected: " + allowed + " Got: " + graph.isAccepting());[m
[36m@@ -164,11 +180,18 @@[m [mclass Solver extends React.Component<any, any> {[m
     throw new Error("not Implemented") // TODO[m
   }[m
 [m
[32m+[m[32m  changePage(page: number) {[m
[32m+[m[32m    this.setState({currentQuestion: page-1});[m
[32m+[m[32m    this.resetGraph()[m
[32m+[m[32m  }[m
[32m+[m
   nextQuestion(){[m
     let exercises = this.state.exercises[m
     let oldQuestion = this.state.currentQuestion[m
     if ( exercises.length > oldQuestion + 1){[m
       this.setState({currentQuestion: oldQuestion + 1, showSuccessDialog: false}, () => {this.handleProgress()})[m
[32m+[m[32m    } else {[m
[32m+[m[32m      this.setState({showSuccessDialog: false}, () => {this.handleProgress()})[m
     }[m
   }[m
 [m
[36m@@ -180,7 +203,7 @@[m [mclass Solver extends React.Component<any, any> {[m
   }[m
 [m
   resetGraph() {[m
[31m-    let graph = parser.parse(this.state.solution)[m
[32m+[m[32m    let graph = parser.parse(this.state.exercises[this.state.currentQuestion].studentSolution);[m
     this.setState({graph: graph})[m
   }[m
 [m
[36m@@ -191,7 +214,9 @@[m [mclass Solver extends React.Component<any, any> {[m
     return ([m
       <div className="App">[m
         <Header title="Solve a DCR training exercise!" />[m
[31m-        <Pagination variant="outlined" shape="rounded" count={this.state.exercises.length} page={cq+1} onChange={(e, page) => this.setState({currentQuestion: page-1})}/>[m
[32m+[m[32m        <Pagination variant="outlined" shape="rounded" count={this.state.exercises.length} page={cq+1} onChange={(e, page) => this.changePage(page)}/>[m
[32m+[m[32m        <br />[m
[32m+[m[32m        <LinearProgress variant="determinate" color="primary" value={this.state.percentExercises} />[m
         <Grid container>[m
           <Grid item xs={9}>[m
 [m
[36m@@ -232,10 +257,10 @@[m [mclass Solver extends React.Component<any, any> {[m
               <h2>And these are the symbols and the activities that they represent!</h2>[m
               <Grid container spacing={2} component="form"> [m
                 {exercise.symbols.map((symbol: Symbol, index: number) => ([m
[31m-                  <>[m
[32m+[m[32m                  <React.Fragment key={index}>[m
                     <Grid item xs={6}><TextField fullWidth id="sym" label="Symbol" variant="outlined" value={symbol.symbol} InputProps={{readOnly: true}} /></Grid>[m
                     <Grid item xs={6}><TextField fullWidth id="act" label="Activity" variant="filled" value={symbol.activity} InputProps={{readOnly: true}} /></Grid>[m
[31m-                  </>[m
[32m+[m[32m                  </React.Fragment>[m
                 ))}[m
               </Grid>[m
             </Paper>[m
[36m@@ -249,7 +274,7 @@[m [mclass Solver extends React.Component<any, any> {[m
                 label="Your Solution:"[m
                 multiline[m
                 rows={4}[m
[31m-                defaultValue="*** DCR graph here"[m
[32m+[m[32m                value={exercise.studentSolution}[m
                 onChange={e => this.parseSolution(e)}[m
               />[m
               {this.state.parseError === "" ? "" : <Alert severity="error">{this.state.parseError}</Alert>}[m
[36m@@ -283,7 +308,7 @@[m [mclass Solver extends React.Component<any, any> {[m
                 <ListItemText primary="Next exercise" />[m
               </ListItemButton>[m
               <ListItemButton onClick={() => this.prevQuestion()}>[m
[31m-                <ListItemIcon><NextIcon /></ListItemIcon>[m
[32m+[m[32m                <ListItemIcon><PreviousIcon /></ListItemIcon>[m
                 <ListItemText primary="Previous exercise" />[m
               </ListItemButton>[m
             </List>[m
[36m@@ -295,12 +320,6 @@[m [mclass Solver extends React.Component<any, any> {[m
               component="nav"[m
               aria-labelledby="nested-list-subheader"[m
             >[m
[31m-              {/* TODO: the line progressbar should probably be moved to the top of the page */}[m
[31m-              [m
[31m-              <ListItemText primary="Progress for Questions!" />[m
[31m-             [m
[31m-              <LinearProgress variant="determinate" color="primary" value={this.state.percentExercises} />[m
[31m-[m
               <ListItemText primary="Progress for Allowed Scenarios!" />[m
               <CircularProgressWithLabel variant="determinate" value={this.state.percentRequired} />[m
               <ListItemText primary="Progress for Forbidden Scenarios!" />[m
[36m@@ -313,6 +332,7 @@[m [mclass Solver extends React.Component<any, any> {[m
         <SuccessDialog[m
           open={this.state.showSuccessDialog}[m
           onClose={this.nextQuestion.bind(this)}[m
[32m+[m[32m          last={this.state.currentQuestion === this.state.exercises.length - 1}[m
         />[m
         <Footer />[m
       </div>[m
[36m@@ -320,4 +340,4 @@[m [mclass Solver extends React.Component<any, any> {[m
   }[m
 }[m
 [m
[31m-export default Solver;[m
[32m+[m[32mexport default withRouter(Solver);[m
[1mdiff --git a/src/Util/Bondary/dcr_editor.js b/src/Util/Bondary/dcr_editor.js[m
[1mdeleted file mode 100644[m
[1mindex e69de29..0000000[m
[1mdiff --git a/src/Util/Bondary/exercise_editor.js b/src/Util/Bondary/exercise_editor.js[m
[1mdeleted file mode 100644[m
[1mindex e69de29..0000000[m
[1mdiff --git a/src/Util/Bondary/front_page.js b/src/Util/Bondary/front_page.js[m
[1mdeleted file mode 100644[m
[1mindex e69de29..0000000[m
[1mdiff --git a/src/Util/Control/exercise_checker.js b/src/Util/Control/exercise_checker.js[m
[1mdeleted file mode 100644[m
[1mindex 12cd423..0000000[m
[1m--- a/src/Util/Control/exercise_checker.js[m
[1m+++ /dev/null[m
[36m@@ -1,3 +0,0 @@[m
[31m-function compare_trace() {[m
[31m-    [m
[31m-}[m
\ No newline at end of file[m
[1mdiff --git a/src/Util/Control/exercise_logic.js b/src/U